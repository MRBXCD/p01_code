/root/miniconda3/envs/p01/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/root/miniconda3/envs/p01/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=VGG16_Weights.IMAGENET1K_V1`. You can also use `weights=VGG16_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Loaded training data from: /root/autodl-tmp/shared_data/projection/raw/Projection_train_data_16_angles_padded.npz
Loaded val data from: /root/autodl-tmp/shared_data/projection/raw/Projection_val_data_16_angles_padded.npz
Train data information:
Caution: Max value of input data is 46.328514099121094, do data normalization
Now is projection model, only the input data will be loaded, the target will be created automatically
---------------------------------------------
Caution: Max value of input data is 40.22502899169922, do data normalization
Now is projection model, only the input data will be loaded, the target will be created automatically
---------------------------------------------
Data shuffled
-------Train From Beginning-------
Traceback (most recent call last):
  File "/root/autodl-tmp/p01_code/projection_predict/main.py", line 79, in <module>
    main()
  File "/root/autodl-tmp/p01_code/projection_predict/main.py", line 74, in main
    model_train.train()
  File "/root/autodl-tmp/p01_code/projection_predict/trainer.py", line 423, in train
    metric_train = self.train_epoch(epoch + 1)
  File "/root/autodl-tmp/p01_code/projection_predict/trainer.py", line 244, in train_epoch
    loss.backward()
  File "/root/miniconda3/envs/p01/lib/python3.10/site-packages/torch/_tensor.py", line 581, in backward
    torch.autograd.backward(
  File "/root/miniconda3/envs/p01/lib/python3.10/site-packages/torch/autograd/__init__.py", line 347, in backward
    _engine_run_backward(
  File "/root/miniconda3/envs/p01/lib/python3.10/site-packages/torch/autograd/graph.py", line 825, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 686.00 MiB. GPU 0 has a total capacity of 23.65 GiB of which 170.50 MiB is free. Process 925959 has 9.16 GiB memory in use. Process 926610 has 14.31 GiB memory in use. Of the allocated memory 13.07 GiB is allocated by PyTorch, and 823.56 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
